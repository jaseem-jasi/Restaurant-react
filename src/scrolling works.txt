import { useEffect, useState } from "react";
import { BrowserRouter as Router, Routes, Route } from "react-router-dom";
import "./App.css";
import Navbar from "./Navbar";
import Hero from "./Hero";
import Menu from "./Menu";
import Cart from "./Cart";

function MainPage({ cart, addToCart }) {
  const [active, setActive] = useState("main");

  useEffect(() => {
    const container = document.querySelector(".horizontal-scroll");
    const sections = document.querySelectorAll(".h-section");

    const onWheel = (e) => {
      const activeSection = [...sections].find(
        (sec) =>
          Math.abs(sec.offsetLeft - container.scrollLeft) < 10
      );
      if (!activeSection) return;

      const maxScroll = activeSection.scrollHeight - activeSection.clientHeight;

      // tolerance for float errors
      const atTop = activeSection.scrollTop <= 0;
      const atBottom = activeSection.scrollTop >= maxScroll - 2;

      if (e.deltaY > 0) {
        // scrolling down
        if (!atBottom) {
          return; // still room to scroll vertically
        }
      } else {
        // scrolling up
        if (!atTop) {
          return; // still room to scroll vertically
        }
      }

      e.preventDefault();
      container.scrollTo({
        left:
          container.scrollLeft +
          (e.deltaY > 0 ? window.innerWidth : -window.innerWidth),
        behavior: "smooth",
      });
    };

    if (container) {
      container.addEventListener("wheel", onWheel, { passive: false });
    }

    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            setActive(entry.target.id);
          }
        });
      },
      { root: container, threshold: 0.5 }
    );

    sections.forEach((sec) => observer.observe(sec));

    return () => {
      if (container) container.removeEventListener("wheel", onWheel);
      observer.disconnect();
    };
  }, []);

  return (
    <>
      <Navbar active={active} cart={cart} />
      <div className="horizontal-scroll">
        <section id="main" className="h-section">
          <Hero />
        </section>

        <section id="menu" className="h-section">
          <Menu addToCart={addToCart} />
        </section>

        <section id="contact" className="h-section contact">
          <h2>Contact</h2>
          <p style={{ height: "150vh" }}>
            This is a long section with extra vertical scroll before moving
            horizontally.
          </p>
        </section>
      </div>
    </>
  );
}

function App() {
  const [cart, setCart] = useState([]);

  const addToCart = (food) => {
    setCart((prev) => {
      const existing = prev.find((item) => item.id === food.id);
      if (existing) {
        return prev.map((item) =>
          item.id === food.id ? { ...item, qty: item.qty + 1 } : item
        );
      }
      return [...prev, { ...food, qty: 1 }];
    });
  };

  const updateQty = (id, qty) => {
    if (qty <= 0) {
      setCart((prev) => prev.filter((item) => item.id !== id));
    } else {
      setCart((prev) =>
        prev.map((item) => (item.id === id ? { ...item, qty } : item))
      );
    }
  };

  const removeFromCart = (id) => {
    setCart((prev) => prev.filter((item) => item.id !== id));
  };

  return (
    <Router>
      <Routes>
        <Route
          path="/"
          element={<MainPage cart={cart} addToCart={addToCart} />}
        />
        <Route
          path="/cart"
          element={
            <Cart
              cart={cart}
              updateQty={updateQty}
              removeFromCart={removeFromCart}
              showMenuButton={true}
            />
          }
        />
      </Routes>
    </Router>
  );
}

export default App;










html, body, #root {
  margin: 0;
  padding: 0;
  width: 100%;
  min-height: 100%;
  overflow-x: hidden; 
  overflow-y: auto; 
  height: 100%;  
}


.horizontal-scroll {
  display: flex;
  height: 100vh;
  width: 100vw;
  overflow-x: hidden; 
  scroll-behavior: smooth;
}

.h-section {
  flex: 0 0 100vw;
  height: 100vh;
  overflow-y: auto; 
  scroll-snap-align: start;
}




.section, .hero {
  flex: 0 0 100vw;  /* each takes full screen width */
  height: 100vh;
  scroll-snap-align: start;
  display: flex;
  align-items: center;
  justify-content: center;
  flex-direction: column;
}

.menu {
  background: #f7f3e9;
}

.contact {
  background: #e8f7ff;
}

.main-btn {
  margin-top: 20px;
  background: linear-gradient(135deg, #ff8c00, #ff3c00);
  color: white;
  padding: 12px 25px;
  font-size: 1rem;
  font-weight: bold;
  border: none;
  border-radius: 8px;
  cursor: pointer;
  box-shadow: 0 4px 10px rgba(0,0,0,0.2);
  transition: all 0.3s ease;
}

.main-btn:hover {
  background: linear-gradient(135deg, #ff3c00, #ff8c00);
  transform: scale(1.05);
}

/* Floating Cart Button */
.cart-fab {
  position: fixed;
  bottom: 20px;
  right: 20px;
  background: rgba(255, 255, 255, 0.2);
  backdrop-filter: blur(12px);
  border: 2px solid rgba(255, 255, 255, 0.4);
  border-radius: 50%;
  width: 60px;
  height: 60px;
  font-size: 24px;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1000;
  position: fixed;
}

.cart-fab:hover {
  background: rgba(255, 255, 255, 0.4);
  transform: scale(1.1);
}

/* Cart badge */
.cart-badge {
  position: absolute;
  top: -5px;
  right: -5px;
  background: #ff6f61;
  color: #fff;
  border-radius: 50%;
  width: 20px;
  height: 20px;
  font-size: 0.8rem;
  display: flex;
  align-items: center;
  justify-content: center;
}


